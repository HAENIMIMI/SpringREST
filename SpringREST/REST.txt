
	REST(Representational State Transfer)
		- 데이터 통신 방식 (URL/URI - 데이터 연결)
		- 최근의 서버 프로그램은 다양한 브라우저와 안드로이폰, 아이폰과 같은 모바일 디바이스에서도 통신을 할 수 있어야 한다.
		- 이러한 멀티 플랫폼에 대한 지원을 위해 서비스 자원에 대한 아키텍처를 세우고 이용하는 방법을 모색한 결과, 
		  REST에 관심을 가지게 되었다.
		- 하나의 URI는 고유한 리소스(데이터)를 가지도록 한다
		=> 서버에서 제공하는 데이터를 각각의 기기(웹, 모바일 등…)에 따라서 공통으로 처리가능한 데이터
		
	REST API
		- REST 방식으로(특정 URI를 통한 데이터 제공) 정보제공하는 API
		=> REST API 제공하는 서비스를 Restful하다. (RESTful API)
	
	가능하다면 리소스 URI는 동사(리소스에 대한 작업)가 아닌 명사(리소스)를 기반으로 해야 합니다.

	https://adventure-works.com/orders // 명사 - Good
	https://adventure-works.com/create-order // 동사 - Avoid	
	
	
	@ResponseBody - 스프링3 이후 등장한 어노테이션 : REST 방식 지원
	@RestController - 스프링4 
	
	
	Http Status(상태코드)
	https://developer.mozilla.org/ko/docs/Web/HTTP/Status
	
	100번대 : 현재 데이터의 처리 중인 상태
	100 : 데이터의 일부를 서버가 받은 상태
	
	200번대 : 정상적인 응답
	200 : 에러 없이 정상처리!
	204 : 정상처리 완료, 서버에서 보낼 데이터가 없음
	
	300번대 : 다른 URL 처리
	301 : 요청된 페이지가 새로운 URL로 변경
	304 : 기존의 데이터와 변경된 것이 없음
	
	400번대 : 서버에서 인식할 수 없음!
	400 : 전송된 요청(request)에 문제가 있음 (전달데이터 오류)
	403 : 서버 접속 허가 불가(잘못된 접근)
	404 : URL에 해당하는 자원(페이지)가 없음
	406 : 전송방식 에러(REST 동작 시 발생)
	
	500번대 : 서버 내부의 문제
	500 : 서버에서 데이터 처리 시 에러 발생!
	502 : 게이트웨이나 프록시 상태 문제 (과부하)
	503 : 주로 해외에 있는 서버를 사용할 때 일시적인 서버 과부하, 서비스 중단 상태
	504 : 지정된 처리 시간이 지나서 처리 불가
	
	
	REST 방식 -> 동작 URI 구현(Http Method)
	
	GET : 정보조회(select)
	POST : 정보 추가 / 생성 (create)
	PUT / PATCH : 정보 수정(update : put - 전체, patch - 일부분 수정)
	DELETE : 정보삭제(delete)
	

	* URI 주소 구성
	[/작업명 /기본키 + 메서드 + 데이터]
	
	작업명 : 요청하고자 하는 작업의 종류(컨트롤러 종류... members, boards, goods...)
			 명사의 형태로 데이터들 준비해야 함!
	기본키 : 요청에 필요한 작업 동작의 기본키
	메서드 : 요청하는 기능
	데이터 : 기능에 필요한 데이터(JSON) 
	
		
	
	* CRUD
	Create				Read				Update					Delete
	새글 작성			특정 글 조회		정보수정				글 삭제
	POST				GET					PUT(전체정보수정)		DELETE
	/boards+데이터		/boards/100			/boards/100+데이터		/boards/100
							  (글번호)				   (수정할)
	
	
	
	
	